name: PR Pipeline - Staging and Production

on:
  pull_request:
    branches:
      - main # Only triggers for PR to `main`
    types:
      - opened
      - synchronize
      - reopened

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'

    - name: Load Environment Variables for Staging
      run: |
        cp .env.staging .env # Copy .env.staging into .env
        echo "DB_CONNECTION_STRING=${{ secrets.DB_CONNECTION_STRING_STAGING }}" >> $GITHUB_ENV
        echo "FIREBASE_CLI_TOKEN=${{ secrets.FIREBASE_CLI_TOKEN }}" >> $GITHUB_ENV

    - name: Install Dependencies (Frontend and Backend)
      run: |
        cd user-facing-backend/Express-Typescript
        npm install
        cd ../user-facing-frontend/React-Typescript
        npm install

    - name: Lint Code
      run: |
        cd user-facing-backend/Express-Typescipt
        npm run lint
        cd ../user-facing-frontend/React-Typescript
        npm run lint

    - name: Run Tests
      run: |
        cd user-facing-backend/Express-Typescript
        npm test
        cd ../user-facing-frontend/React-Typescript
        npm test

    - name: Build Frontend
      run: |
        cd user-facing-frontend/React-Typescript
        npm run build
        cp -r build/* ../user-facing-backend/Express-Typescript/public/build/

    - name: Deploy to Firebase Staging
      run: |
        cd user-facing-backend/Express-Typescript
        firebase deploy --only hosting --token $FIREBASE_CLI_TOKEN

    - name: Update PR with Staging URL
      run: |
        echo "Staging URL: https://staging-firebase-url.com" # Replace with actual staging URL

  docker-deploy:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == 'true'

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Load Environment Variables for Production
      run: |
        cp .env.prod .env # Copy .env.prod into .env
        echo "DB_CONNECTION_STRING=${{ secrets.DB_CONNECTION_STRING_PROD }}" >> $GITHUB_ENV

    - name: Set up Docker
      uses: docker/setup-buildx-action@v2
      with:
        version: latest

    - name: Build and Push Docker Image
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        docker build -t ${{ secrets.DOCKER_REGISTRY }}/your-app:${{ github.sha }} .
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        docker push ${{ secrets.DOCKER_REGISTRY }}/your-app:${{ github.sha }}

    - name: Deploy to Production
      run: |
        kubectl apply -f kubernetes/production.yaml # Adjust this based on your kubernetes deployment config

    - name: Update PR with Production URL
      run: |
        echo "Production URL: https://production-url.com" # Replace with actual production URL