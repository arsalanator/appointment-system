name: Development and Staging Pipeline

on:
  push:
    branches-ignore:
      - main
  pull_request:
    types: [opened, synchronize]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    env:
      DB_CONNECTION_STRING: ${{ secrets.DB_CONNECTION_STRING_DEV }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Backend steps
      - name: Install backend dependencies
        working-directory: user-facing-backend/Express-Typescript
        run: npm ci

      - name: Copy environment file
        working-directory: user-facing-backend/Express-Typescript
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            cp .env.staging .env
          else
            cp .env.dev .env
          fi

      - name: Lint backend
        working-directory: user-facing-backend/Express-Typescript
        run: npm run lint

      - name: Run backend tests
        working-directory: user-facing-backend/Express-Typescript
        run: npm test
        env:
          DB_CONNECTION_STRING: ${{ secrets.DB_CONNECTION_STRING_DEV }}

      # Frontend steps
      - name: Install frontend dependencies
        working-directory: user-facing-frontend/React-Typescript
        run: npm ci

      - name: Copy frontend environment file
        working-directory: user-facing-frontend/React-Typescript
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            cp .env.staging .env
          else
            cp .env.dev .env
          fi

      - name: Lint frontend
        working-directory: user-facing-frontend/React-Typescript
        run: npm run lint

      - name: Run frontend tests
        working-directory: user-facing-frontend/React-Typescript
        run: npm test

  build-and-deploy:
    needs: lint-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Build frontend
      - name: Install frontend dependencies
        working-directory: user-facing-frontend/React-Typescript
        run: npm ci

      - name: Build frontend
        working-directory: user-facing-frontend/React-Typescript
        run: npm run build

      # Move frontend build to backend
      - name: Move frontend build to backend
        run: |
          mkdir -p user-facing-backend/Express-Typescript/public/build
          cp -r user-facing-frontend/React-Typescript/build/* user-facing-backend/Express-Typescript/public/build/

      # Deploy to Firebase
      - name: Deploy to Firebase
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          projectId: ${{ secrets.FIREBASE_PROJECT_ID }}
          channelId: ${{ github.event_name == 'pull_request' && 'staging' || 'dev' }}

      # Update PR with staging URL if it's a pull request
      - name: Update PR with staging URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const stagingUrl = `https://staging--${process.env.FIREBASE_PROJECT_ID}.web.app`;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `ðŸš€ Staging deployment is ready at: ${stagingUrl}`
            });